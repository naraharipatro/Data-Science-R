results=as.character(predict(model,newdata = testing))
accuracy=sum(results==testing$class)/20
accuracy
myData=mpg[1:40,]
# split to train and test
training=myData[seq(1,39,2),]
testing=myData[seq(2,40,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
myData=mpg[1:40,-6]
# split to train and test
training=myData[seq(1,39,2),]
testing=myData[seq(2,40,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
myData=droplevel(mpg[1:40,])
library(base)
myData=droplevel(mpg[1:40,])
myData=droplevels(mpg[1:40,])
# split to train and test
training=myData[seq(1,39,2),]
testing=myData[seq(2,40,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
myData$trans
myData=droplevels(mpg[1:80,])
# split to train and test
training=myData[seq(1,79,2),]
testing=myData[seq(2,80,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
myData=droplevels(mpg[1:80,-6])
# split to train and test
training=myData[seq(1,79,2),]
testing=myData[seq(2,80,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
myData=droplevels(mpg[1:200,])
# split to train and test
training=myData[seq(1,199,2),]
testing=myData[seq(2,200,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
myData=droplevels(mpg[1:200,-6])
# split to train and test
training=myData[seq(1,199,2),]
testing=myData[seq(2,200,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
accuracy=sum(results==testing$class)/20
accuracy
accuracy=sum(results==testing$class)/100
accuracy
myData=mpg
myData=mpg
# split to train and test
training=myData[seq(1,233,2),]
testing=myData[seq(2,234,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
myData=mpg[,-6]
# split to train and test
training=myData[seq(1,233,2),]
testing=myData[seq(2,234,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
accuracy=sum(results==testing$class)/100
accuracy
library(ggplot2)
library(caret)
myData=mpg[,-6]
# split to train and test
training=myData[seq(1,233,2),]
testing=myData[seq(2,234,2),]
# build the model
model = train(class ~.,data=training,method="kknn")
# testing the model
results=as.character(predict(model,newdata = testing))
accuracy=sum(results==testing$class)/117
accuracy
nrows(testing)
nrow(testing)
x=5
y=3
x+y
x=3
y=5
print(x+y)
x=3
y=5
#print(x+y)
# my code
1:20
install.packages("ggplot2")
version
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
install.packages("XLConnectJars")
library(XLConnect)
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("XLConnectJars", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(XLConnect)
chamber <- readWorksheet(loadWorkbook("Chamber.xls"),startRow=4,sheet=1) # read LAT sheet
library(XLConnect)
capabilities(XLConnect)
Name1 <- "Barack"
Name2 <- "Obama"
FullName <- merge(Name1, Name2)
FullName
FullName2 <- c(Name1, Name2)
noquote(FullName2)
paste(Name1,Name2)
x=2
v1 = c(6,5,4,3,2,1)
v2 = c(10,9,8,7,6,5)
v3 = v1 + v2
as.character(v3)
x=1
x=1
x=1
y=2
x
y
x=x+1
x=j
2+2
2+2
1:20
1:40
2+2^3
2+(2^3)
sqrt(16)
sqrt(16)
log(16)
exp(1)
log10(100)
log2(16)
log(16)
z<-x+y
seq(1,10)
seq(1,10,by=2)
v1=c(2,4,5,6,7,8,11)
v2=c(5,1,-3,5,6,4)
v2=c(5,1,-3,5,6,4,12)
v1+v2
v2=c(5,1,-3,5,6,4)
v1+v2
v2=c(5,1,-3,5,6,4,12)
v1-v2
rep(3,22)
v3=v1+v2
v3=v1+v2
max(v3)
v3
min(v3)
length(v3)
mean(v3)
sd(v3)
var(v3)
s="mohammad"
vs=c("mohammad","dan","julianna")
vs=c("mohammad","dan",2)
as.character(12)
as.numeric("12")
v3
as.character(v3)
v3
v3[4]
v3[7]
1:3
v3[1:3]
v3[2:4]
v3[1:7]
v3[1:8]
v3
v3[-4]
v3
v3[-4]
v3[c(3,4,7)]
v3
v3[-c(3,4,7)]
v3[x>10]
v3[v3>10]
v3>10
a=c("David","Eamonn","Jen")
b=c(100,88,98)
d=c(5,6,7)
students=data.frame(names=a,grades=b,heights=d)
View(students)
students$names
as.character(students$names)
students$grades
install.packages("datasets")
library(datasets)
m=mtcars
View(m)
m[3,3]
m[2,6]
m["Datsun 710","disp"]
nrow(m)
ncol(m)
colnames(m)
colnames(m)[3]
colnames(m)[3]="noName"
colnames(m)
colnames(m)[1:3]=c("a","b","c")
x=8
y=12
temp=x
x=y
y=temp
x
y
first="Mohammad"
last="Shokoohi"
paste(first,last)
first="Mohammad"
last="Shokoohi"
paste(first,last,sep = "")
cars
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
cars
ggplot(cars,aes(speed,dist))+geom_point()
esoph
euro
airmiles
chickwts
WWWusage
uspop
rock
ggplot(rock,aes(area,peri))+geom_point()
USArrests
Titanic
esoph
chickwts
library(xlsx)
install.packages("rJava",type='source')
install.packages("rJava", type = "source")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("xlsxjars", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(xlsx)
library(xlsx)
library(ggplot2)
mpg
myCars=mpg
View(myCars)
ggplot(mpg,aes(hwy))+geom_histogram(binwidth = 5)
ggplot(mpg,aes(hwy))+geom_histogram(binwidth = 5,
color="green",
fill="blue")
ggplot(mpg,aes(hwy))+geom_histogram(binwidth = 5,
color="green",
fill="blue")+
theme_bw()
ggplot(mpg,aes(hwy))+geom_histogram(binwidth = 5,
color="green",
fill="blue")+
theme_bw()+ggtitle("nice plot")
ggplot(mpg,aes(hwy))+geom_histogram(binwidth = 5,
color="green",
fill="blue")+
theme_bw()+ggtitle("nice plot")+xlab("hey")+
ylab("science")
ggplot(mpg,aes(x=cty,y=hwy))+geom_point()
ggplot(mpg,aes(x=cty,y=hwy))+geom_point(color="red")
ggplot(mpg,aes(x=cty,y=hwy))+geom_point(color="red",
size=5)
View(myCars)
mtcars=mtcars
View(mtcars)
linrary(ggplot2)
library(ggplot2)
ggplot(mtcars,aes(x=wt,y=qsec))+geom_point()
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()
ggplot(mtcars,aes(x=wt,y=mpg))+geom_boxplot()
ggplot(mtcars,aes(x=cyl,y=mpg))+geom_boxplot()
ggplot(mtcars,aes(x=as.character(cyl),y=mpg))+geom_boxplot()
library(ggplot2)
mtcars=mtcars
View(mtcars)
ggplot(mtcars,aes(mpg))
ggplot(mtcars,aes(mpg))+geom_histogram()
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth = 5)
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth =10)
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth =1)
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth =5)
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth =5)+ggtitle("distribution of mpg")
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth =5)+ggtitle("distribution of mpg")+
ylab("number")
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth =5)+ggtitle("distribution of mpg")+
ylab("number")+xlab("milePerGalon")
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth =5)+ggtitle("distribution of mpg")+
ylab("number")+xlab("milePerGalon")+xlim(0,50)
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth =5,color="red")+ggtitle("distribution of mpg")+
ylab("number")+xlab("milePerGalon")+xlim(0,50)
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth =5,color="red",fill="green")+ggtitle("distribution of mpg")+
ylab("number")+xlab("milePerGalon")+xlim(0,50)
ggplot(mtcars,aes(x=wt,y=qsec))
ggplot(mtcars,aes(x=wt,y=qsec))+geom_point()
ggplot(mtcars,aes(x=wt,y=qsec))+geom_point()+ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=qsec))+geom_point(size=3)+ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=qsec))+geom_point(size=5)+ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=qsec))+geom_point(size=5,color="blue")+ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=qsec))+geom_point(size=5,color="green")+ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point(size=5,color="green")+ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=mpg,color=cyl))+geom_point(size=5,color="green")+
ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=mpg,color=as.character(cyl)))+geom_point(size=5,color="green")+
ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=mpg,color=as.character(cyl)))+geom_point(size=5)+
ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=mpg,color=cyl))+geom_point(size=5)+
ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=wt,y=mpg,color=as.character(cyl)))+geom_point(size=5)+
ggtitle("correlation of wt and qsec")
ggplot(mtcars,aes(x=cyl,y=mpg))+geom_boxplot()
ggplot(mtcars,aes(x=as.character(cyl),y=mpg))+geom_boxplot()
ggplot(mtcars,aes(x=as.character(cyl),y=mpg))+geom_boxplot()+xlab("number of cylinders")+
ggtitle("boxplots for mpg s")
ggplot(mtcars,aes(x=as.character(cyl),y=mpg,color=as.character(cyl)))+geom_boxplot()+xlab("number of cylinders")+
ggtitle("boxplots for mpg s")
ggplot(mtcars,aes(x=as.character(cyl),y=mpg,fill=as.character(cyl)))+geom_boxplot()+xlab("number of cylinders")+
ggtitle("boxplots for mpg s")
ggplot(mtcars,aes(x=as.character(cyl),y=mpg,fill=as.character(cyl)))+geom_violin()+xlab("number of cylinders")+
ggtitle("boxplots for mpg s")
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
max(mtcars$mpg)
which(mtcars$mpg==max(mtcars$mpg))
which(max(mtcars$mpg))
which(mtcars$mpg<20)
which.max(mtcars$mpg)
max(mtcars$mpg)
max(mtcars[,1])
mean(mtcars$mpg)
which.max(mtcars$mpg)
rownames(mtcars)
rownames(mtcars)[index]
index=which.max(mtcars$mpg)
rownames(mtcars)[index]
index=which.min(mtcars$mpg)
rownames(mtcars)[index]
which(mtcars$mpg>30)
index1=which(mtcars$mpg>30)
rownames(mtcars)[index1]
which(mtcars$mpg==max(mtcars$mpg))
dat=data.frame(name=c("hamid","mohammad"),grades1=c(80,100),grades2=c(90,60),grades3=c(40,60))
View(dat)
linrary(ggplot2)
library(ggplot2)
boxplot.matrix(dat)
boxplot.matrix(dat,col=2:4)
boxplot(dat[, 2] ~ dat[, 4])
boxplot(dat[1,] ~ dat[2,])
boxplot(dat[1,2:4] ~ dat[2,2:4])
ggplot(dat,aes(x=name,y=grades1))+geom_boxplot()
ggplot(dat,aes(x=name,y=c(grades1,grades2,grades3)))+geom_boxplot()
ggplot(dat,aes(x=name,y=grades1))+geom_boxplot()
dat1=melt(dat)
library(reshape)
dat1=melt(dat)
dat1=melt(dat,id=name)
dat1=melt(dat,id="name")
View(dat1)
ggplot(dat1,aes(x=name,y=value))+geom_boxplot()
library(RSelenium)
# run the selenium server and open firefox browser
RSelenium::startServer()
RSelenium::checkForServer()
RSelenium::startServer()
remDr <- remoteDriver$new()
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4444,
browserName = "safari"
)
remDr$open()
RSelenium::startServer()
remDr <- remoteDriver$new()
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4444,
browserName = "safari"
)
remDr$open()
remDr$navigate("http://www.google.com")
webElem <- remDr$findElement(using = 'id', "lst-ib")
webElem$sendKeysToElement(list("how old is Obama?"))
webElem <- remDr$findElement(using = 'name', "btnG")
webElem$clickElement()
RSelenium::checkForServer()
RSelenium::startServer()
remDr <- remoteDriver$new()
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4444,
browserName = "safari"
)
remDr$open()
setwd("~/Desktop/Week6-Material/spamModel")
# SCI01 Stanford - Fall 2016
# make sure to install stringr library first
library(stringr)
library(base)
# read the email
emailWords<-scan("sample.txt", what="char", sep=" ")
emailWords<-tolower(emailWords)
# remove all punctuations
emailWords<-gsub( "[^[:alnum:]]", "", emailWords)
# read the header file
spamHeaders=read.csv("spambaseHeaders.csv",stringsAsFactors = FALSE,row.names = NULL)
# remove substring "word_freq"
spamWords=sub(".*word_freq_", "", spamHeaders[,1])
# remove colons
spamWords=sub(":.*", "", spamWords)
# find the frequency of words
spamWords=spamWords[31:78]
wordCounts=NULL
for (i in 1:length(spamWords)){
wordCounts=c(wordCounts,sum(emailWords==spamWords[i]))
}
wordFrequencies=100*wordCounts/length(emailWords)
emailChars<-scan("sample.txt", what="char",sep="")
# let's count the number of special characters
charFrequencies=NULL
specialChars=c("\\;","\\(","\\[","\\!","\\$","\\#")
for (i in (1:length(specialChars))){
charFrequencies=c(charFrequencies,str_count(paste(emailChars,collapse=""),specialChars[i]))
}
charFrequencies=100*charFrequencies/nchar(paste(emailChars,collapse=""))
charEmail=readChar("sample.txt", file.info("sample.txt")$size)
charEmail=strsplit(charEmail,split="")
booleanCapital=(grepl("[A-Z]",unlist(charEmail)))
capitalIndexes=which(booleanCapital==TRUE)
capitalLength=NULL
ind=1;
while (ind<length(capitalIndexes)){
len=1
while(capitalIndexes[ind]==capitalIndexes[ind+1]-1){
len=len+1
ind=ind+1
}
capitalLength=c(capitalLength,len)
ind=ind+1
}
if(capitalLength[length(capitalLength)]==1)
capitalLength=c(capitalLength,1)
capitalFrequencies=c(mean(capitalLength),max(capitalLength),sum(capitalLength))
allFeatures=c(wordFrequencies,charFrequencies,capitalFrequencies)
allFeatures
mameh=data.frame()
View(spamHeaders)
colnames(mameh)=c("salaam","doodool")
View(mameh)
View(mameh)
remove(mameh)
spamData=read.csv("spambase.csv",stringsAsFactors = FALSE)
mameh=data.frame(setNames(colnames(spamData)))
replicate(5,numeric(0), simplify = F)
View(spamData)
mameh=as.data.frame(setNames(replicate(58,numeric(0), simplify = F), colnames(spamData)))
View(mameh)
View(spamData)
mameh1=as.data.frame(setNames(58, colnames(spamData)))
mameh1=as.data.frame(setNames(rep(1,58), colnames(spamData)))
View(mameh1)
rep(1,5)
replicate(1,5)
replicate(2,5)
mameh1=as.data.frame(setNames(rep(58,1), colnames(spamData)))
mameh1=as.data.frame(setNames(replicate(58,1), colnames(spamData)))
colnames(allFeatures)=colnames(spamData)
colnames(allFeatures)=colnames(spamData)[-1]
allFeatures1=data.frame(allFeatures)
View(allFeatures1)
colnames(allFeatures1)=colnames(spamData)
colnames(allFeatures1)=colnames(spamData)[1:57]
colnames(allFeatures1)=rownames(spamData)[1:57]
rownames(allFeatures1)=colnames(spamData)[1:57]
View(spamData)
training=spamData[seq(1,nrow(spamData),3),]
model=train(X1 ~., training,method="kknn")
library(caret)
model=train(X1 ~., training,method="kknn")
predict(model,allFeatures1)
mamal=spamData[1,]
View(mamal)
